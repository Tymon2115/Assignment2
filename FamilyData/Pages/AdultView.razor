@page "/AdultView"
@using Models
@using Data
@using System.IO
@inject IAdultService AdultService
@inject NavigationManager navigationManager
<h3>AdultView</h3>

<div class="input-group rounded">
    <input type="search" aria-hidden="True" class="form-control" placeholder="Search name or surname" @oninput="@((arg) => FilterAdults(arg))">
    <span class="input-group-text border-0" id="search-addon">
        <i class="oi oi-magnifying-glass"></i>
    </span>
</div>


<AuthorizeView>
    <button class="btn btn-primary" id="addButton" @onclick="@(() => AddAdult())">Add new adult</button>
</AuthorizeView>
@* <label for="filter" class="form-check-label"></label> *@
@* <input type="text" class = "form-control" @bind-></input> *@

@if (adults == null) {
    <p>
        <em>Loading...</em>
    </p>
}
else if (!adults.Any()) {
    <p>
        <em>No adults found</em>
    </p>
}
else {
    <table class="table">
        <thead class="thead-dark">
        <tr>
            <th scope="col">Id</th>
            <th scope="col">First Name</th>
            <th scope="col">Last Name</th>
            <th scope="col">View</th>
            <AuthorizeView Policy="MustBeAdmin">
                <th scope="col">Delete</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (var adult in adultsToShow) {
            <tr>
                <td>@adult.Id</td>
                <td>@adult.FirstName</td>
                <td>@adult.LastName</td>
                <td>
                    <button @onclick="@(() => DetailedView(adult.Id))">
                        <i class="oi oi-eye" style="color: #1b6ec2"></i>
                    </button>
                </td>
                <AuthorizeView Policy="MustBeAdmin">
                    <td>
                        <button @onclick="@(() => DeleteAdult(adult.Id))">
                            <i class="oi oi-delete" style="color: red"></i>
                        </button>
                    </td>
                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Adult> adults;
    private List<Adult> adultsToShow;

    protected override async Task OnInitializedAsync() {
        try {
            Console.WriteLine("getting adults from view");
            adults = (List<Adult>) await AdultService.GetAdults();
            adultsToShow = adults;
        }
        catch (Exception e) {
        }
    }

    private void DetailedView(int adultId) {
        navigationManager.NavigateTo($"DetailedAdultView/{adultId}");
    }

    private void AddAdult() {
        navigationManager.NavigateTo($"AddAdult");
    }

    private void DeleteAdult(int id) {
        AdultService.RemoveAdult(id);
    }

    private void FilterAdults(ChangeEventArgs changeEventArgs) {
        string filterByName = null;
        try {
            filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e) {
            Console.WriteLine(e);
            throw;
        }
        if (filterByName != null) {
            adultsToShow = adults.Where(adult => adult.FirstName.Contains(filterByName) || adult.LastName.Contains(filterByName)).ToList();
        }
        else {
            adultsToShow = adults;
        }
    }



}